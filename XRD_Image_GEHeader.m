function [header] = XRD_Image_GEHeader(fpath)
% Reads GE2 header info
[PATHSTR,NAME,EXT] = fileparts(fpath);

header = struct(...
    'ImageFormat','',...
    'VersionOfStandardHeader','',...
    'StandardHeaderSizeInBytes','',...
    'VersionOfUserHeader','',...
    'UserHeaderSizeInBytes','',...
    'NumberOfFrames','',...
    'NumberOfRowsInFrame','',...
    'NumberOfColsInFrame','',...
    'ImageDepthInBits','',...
    'AcquisitionDate','',...
    'AcquisitionTime','',...
    'DUTID','',...
    'Operator','',...
    'DetectorSignature','',...
    'TestSystemName','',...
    'TestStationRevision','',...
    'CoreBundleRevision','',...
    'AcquisitionName','',...
    'AcquisitionParameterRevision','',...
    'OriginalNumberOfRows','',...
    'OriginalNumberOfColumns','',...
    'RowNumberUpperLeftPointArchiveROI','',...
    'ColNumberUpperLeftPointArchiveROI','',...
    'Swapped','',...
    'Reordered','',...
    'HorizontalFlipped','',...
    'VerticalFlipped','',...
    'WindowValueDesired','',...
    'LevelValueDesired','',...
    'AcquisitionMode','',...
    'AcquisitionType','',...
    'UserAcquisitionCoffFileName1','',...
    'UserAcquisitionCoffFileName2','',...
    'FramesBeforeExpose','',...
    'FramesDuringExpose','',...
    'FramesAfterExpose','',...
    'IntervalBetweenFrames','',...
    'ExposeTimeDelayInMicrosecs','',...
    'TimeBetweenFramesInMicrosecs','',...
    'FramesToSkipExpose','',...
    'ExposureMode','',...
    'PrepPresetTimeInMicrosecs','',...
    'ExposePresetTimeInMicrosecs','',...
    'AcquisitionFrameRateInFps','',...
    'FOVSelect','',...
    'ExpertMode','',...
    'SetVCommon1','',...
    'SetVCommon2','',...
    'SetAREF','',...
    'SetAREFTrim','',...
    'SetSpareVoltageSource','',...
    'SetCompensationVoltageSource','',...
    'SetRowOffVoltage','',...
    'SetRowOnVoltage','',...
    'StoreCompensationVoltage','',...
    'RampSelection','',...
    'TimingMode','',...
    'Bandwidth','',...
    'ARCIntegrator','',...
    'ARCPostIntegrator','',...
    'NumberOfRows','',...
    'RowEnable','',...
    'EnableStretch','',...
    'CompEnable','',...
    'CompStretch','',...
    'LeftEvenTristate','',...
    'RightOddTristate','',...
    'TestModeSelect','',...
    'AnalogTestSource','',...
    'VCommonSelect','',...
    'DRCColumnSum','',...
    'TestPatternFrameDelta','',...
    'TestPatternRowDelta','',...
    'TestPatternColumnDelta','',...
    'DetectorHorizontalFlip','',...
    'DetectorVerticalFlip','',...
    'DFNAutoScrubOnOff','',...
    'FiberChannelTimeOutInMicrosecs','',...
    'DFNAutoScrubDelayInMicrosecs','',...
    'StoreAECROI','',...
    'TestPatternSaturationValue','',...
    'TestPatternSeed','',...
    'ExposureTimeInMillisecs','',...
    'FrameRateInFps','',...
    'kVp','',...
    'mA','',...
    'mAs','',...
    'FocalSpotInMM','',...
    'GeneratorType','',...
    'StrobeIntensityInFtL','',...
    'NDFilterSelection','',...
    'RefRegTemp1','',...
    'RefRegTemp2','',...
    'RefRegTemp3','',...
    'Humidity1','',...
    'Humidity2','',...
    'DetectorControlTemp','',...
    'DoseValueInmR','',...
    'TargetLevelROIRow0','',...
    'TargetLevelROICol0','',...
    'TargetLevelROIRow1','',...
    'TargetLevelROICol1','',...
    'FrameNumberForTargetLevelROI','',...
    'PercentRangeForTargetLevel','',...
    'TargetValue','',...
    'ComputedMedianValue','',...
    'LoadZero','',...
    'MaxLUTOut','',...
    'MinLUTOut','',...
    'MaxLinear','',...
    'Reserved','',...
    'ElectronsPerCount','',...
    'ModeGain','',...
    'TemperatureInDegC','',...
    'LineRepaired','',...
    'LineRepairFileName','',...
    'CurrentLongitudinalInMM','',...
    'CurrentTransverseInMM','',...
    'CurrentCircularInMM','',...
    'CurrentFilterSelection','',...
    'DisableScrubAck','',...
    'ScanModeSelect','',...
    'DetectorAppSwVersion','',...
    'DetectorNIOSVersion','',...
    'DetectorPeripheralSetVersion','',...
    'DetectorPhysicalAddress','',...
    'PowerDown','',...
    'InitialVoltageLevel_VCOMMON','',...
    'FinalVoltageLevel_VCOMMON','',...
    'DmrCollimatorSpotSize','',...
    'DmrTrack','',...
    'DmrFilter','',...
    'FilterCarousel','',...
    'Phantom','',...
    'SetEnableHighTime','',...
    'SetEnableLowTime','',...
    'SetCompHighTime','',...
    'SetCompLowTime','',...
    'SetSyncLowTime','',...
    'SetConvertLowTime','',...
    'SetSyncHighTime','',...
    'SetEOLTime','',...
    'SetRampOffsetTime','',...
    'FOVStartingValue','',...
    'ColumnBinning','',...
    'RowBinning','',...
    'BorderColumns64','',...
    'BorderRows64','',...
    'FETOffRows64','',...
    'FOVStartColumn128','',...
    'FOVStartRow128','',...
    'NumberOfColumns128','',...
    'NumberOfRows128','',...
    'VFPAquisition','',...
    'Comment','');
    
names = fieldnames(header);

if(strcmp(EXT,'.ge2') || strcmp(EXT,'.ge3'))
    ifs = fopen(fullfile(PATHSTR,[NAME,EXT]),'r','n');
    
    header.(names{01}) = fread(ifs,[1 10],'*char');    
    header.(names{02}) = fread(ifs,1,'uint16');    
    header.(names{03}) = fread(ifs,1,'uint32');
    header.(names{04}) = fread(ifs,1,'uint16');    
    header.(names{05}) = fread(ifs,1,'uint32');
    header.(names{06}) = fread(ifs,1,'uint16'); 
    header.(names{07}) = fread(ifs,1,'uint16'); 
    header.(names{08}) = fread(ifs,1,'uint16');
    header.(names{09}) = fread(ifs,1,'uint16');
    header.(names{10}) = fread(ifs,[1 20],'*char'); 
    header.(names{11}) = fread(ifs,[1 20],'*char');
    header.(names{12}) = fread(ifs,[1 20],'*char'); 
    header.(names{13}) = fread(ifs,[1 50],'*char');
    header.(names{14}) = fread(ifs,[1 20],'*char'); 
    header.(names{15}) = fread(ifs,[1 20],'*char'); 
    header.(names{16}) = fread(ifs,[1 20],'*char'); 
    header.(names{17}) = fread(ifs,[1 20],'*char'); 
    header.(names{18}) = fread(ifs,[1 40],'*char');
    header.(names{19}) = fread(ifs,[1 20],'*char');
    header.(names{20}) = fread(ifs,1,'uint16');
    header.(names{21}) = fread(ifs,1,'uint16');
    header.(names{22}) = fread(ifs,1,'uint16');
    header.(names{23}) = fread(ifs,1,'uint16');
    header.(names{24}) = fread(ifs,1,'uint16');
    header.(names{25}) = fread(ifs,1,'uint16');
    header.(names{26}) = fread(ifs,1,'uint16');
    header.(names{27}) = fread(ifs,1,'uint16');
    header.(names{28}) = fread(ifs,1,'uint16');
    header.(names{29}) = fread(ifs,1,'uint16');
    header.(names{30}) = fread(ifs,1,'uint16');
    header.(names{31}) = fread(ifs,1,'uint16');
    header.(names{32}) = fread(ifs,[1 100],'*char');
    header.(names{33}) = fread(ifs,[1 100],'*char');
    header.(names{34}) = fread(ifs,1,'uint16');
    header.(names{35}) = fread(ifs,1,'uint16');
    header.(names{36}) = fread(ifs,1,'uint16');
    header.(names{37}) = fread(ifs,1,'uint16');
    header.(names{38}) = fread(ifs,1,'float64');
    header.(names{39}) = fread(ifs,1,'float64');
    header.(names{40}) = fread(ifs,1,'uint16');
    header.(names{41}) = fread(ifs,1,'uint16');
    header.(names{42}) = fread(ifs,1,'float64');
    header.(names{43}) = fread(ifs,1,'float64');
    header.(names{44}) = fread(ifs,1,'float32');
    header.(names{45}) = fread(ifs,1,'uint16');
    header.(names{46}) = fread(ifs,1,'uint16');
    header.(names{47}) = fread(ifs,1,'float64');
    header.(names{48}) = fread(ifs,1,'float64');
    header.(names{49}) = fread(ifs,1,'float64');
    header.(names{50}) = fread(ifs,1,'uint32');
    header.(names{51}) = fread(ifs,1,'float64');
    header.(names{52}) = fread(ifs,1,'float64');
    header.(names{53}) = fread(ifs,1,'float64');
    header.(names{54}) = fread(ifs,1,'float64');
    header.(names{55}) = fread(ifs,1,'uint32');
    header.(names{56}) = fread(ifs,1,'uint16');
    header.(names{57}) = fread(ifs,1,'uint16');
    header.(names{58}) = fread(ifs,1,'uint16');
    header.(names{59}) = fread(ifs,1,'uint16');
    header.(names{60}) = fread(ifs,1,'uint16');
    header.(names{61}) = fread(ifs,1,'uint32');
    header.(names{62}) = fread(ifs,1,'uint16');
    header.(names{63}) = fread(ifs,1,'uint16');
    header.(names{64}) = fread(ifs,1,'uint16');
    header.(names{65}) = fread(ifs,1,'uint16');
    header.(names{66}) = fread(ifs,1,'uint16');
    header.(names{67}) = fread(ifs,1,'uint16');
    header.(names{68}) = fread(ifs,1,'uint32');
    header.(names{69}) = fread(ifs,1,'uint32');
    header.(names{70}) = fread(ifs,1,'uint32');
    header.(names{71}) = fread(ifs,1,'uint32');
    header.(names{72}) = fread(ifs,1,'uint32');
    header.(names{73}) = fread(ifs,1,'uint32');
    header.(names{74}) = fread(ifs,1,'uint32');
    header.(names{75}) = fread(ifs,1,'uint16');
    header.(names{76}) = fread(ifs,1,'uint16');
    header.(names{77}) = fread(ifs,1,'uint16');
    header.(names{78}) = fread(ifs,1,'uint32');
    header.(names{79}) = fread(ifs,1,'uint32');
    header.(names{80}) = fread(ifs,1,'uint16');
    header.(names{81}) = fread(ifs,1,'uint16');
    header.(names{82}) = fread(ifs,1,'uint32');
    header.(names{83}) = fread(ifs,1,'float32');
    header.(names{84}) = fread(ifs,1,'float32');
    header.(names{85}) = fread(ifs,1,'float32');
    header.(names{86}) = fread(ifs,1,'float32');
    header.(names{87}) = fread(ifs,1,'float32');
    header.(names{88}) = fread(ifs,1,'float32');
    header.(names{89}) = fread(ifs,[1 20],'*char');
    header.(names{90}) = fread(ifs,1,'float32');
    header.(names{91}) = fread(ifs,1,'uint16');
    header.(names{92}) = fread(ifs,1,'float64');
    header.(names{93}) = fread(ifs,1,'float64');
    header.(names{94}) = fread(ifs,1,'float64');
    header.(names{95}) = fread(ifs,1,'float32');
    header.(names{96}) = fread(ifs,1,'float32');
    header.(names{97}) = fread(ifs,1,'float64');
    header.(names{98}) = fread(ifs,1,'float64');
    header.(names{99}) = fread(ifs,1,'uint16');
    header.(names{100}) = fread(ifs,1,'uint16');
    header.(names{101}) = fread(ifs,1,'uint16');
    header.(names{102}) = fread(ifs,1,'uint16');
    header.(names{103}) = fread(ifs,1,'uint16');
    header.(names{104}) = fread(ifs,1,'uint16');
    header.(names{105}) = fread(ifs,1,'uint16');
    header.(names{106}) = fread(ifs,1,'uint16');
    header.(names{107}) = fread(ifs,1,'uint16');
    header.(names{108}) = fread(ifs,1,'uint16');
    header.(names{109}) = fread(ifs,1,'uint16');
    header.(names{110}) = fread(ifs,1,'uint16');
    header.(names{111}) = fread(ifs,1,'uint16');
    header.(names{112}) = fread(ifs,1,'uint16');
    header.(names{113}) = fread(ifs,1,'uint16');
    header.(names{114}) = fread(ifs,1,'float64');
    header.(names{115}) = fread(ifs,1,'uint16');
    header.(names{116}) = fread(ifs,[1 100],'*char');
    header.(names{117}) = fread(ifs,1,'float32');
    header.(names{118}) = fread(ifs,1,'float32');
    header.(names{119}) = fread(ifs,1,'float32');
    header.(names{120}) = fread(ifs,1,'uint32');
    header.(names{121}) = fread(ifs,1,'uint16');
    header.(names{122}) = fread(ifs,1,'uint16');
    header.(names{123}) = fread(ifs,[1 20],'*char');
    header.(names{124}) = fread(ifs,[1 20],'*char');
    header.(names{125}) = fread(ifs,[1 20],'*char');
    header.(names{126}) = fread(ifs,[1 20],'*char');
    header.(names{127}) = fread(ifs,1,'uint16');
    header.(names{128}) = fread(ifs,1,'float32');
    header.(names{129}) = fread(ifs,1,'float32');
    header.(names{130}) = fread(ifs,[1 10],'*char');
    header.(names{131}) = fread(ifs,[1 5],'*char');
    header.(names{132}) = fread(ifs,[1 5],'*char');
    header.(names{133}) = fread(ifs,1,'uint16');
    header.(names{134}) = fread(ifs,[1 20],'*char');
    header.(names{135}) = fread(ifs,1,'uint16');
    header.(names{136}) = fread(ifs,1,'uint16');
    header.(names{137}) = fread(ifs,1,'uint16');
    header.(names{138}) = fread(ifs,1,'uint16');
    header.(names{139}) = fread(ifs,1,'uint16');
    header.(names{140}) = fread(ifs,1,'uint16');
    header.(names{141}) = fread(ifs,1,'uint16');
    header.(names{142}) = fread(ifs,1,'uint16');
    header.(names{143}) = fread(ifs,1,'uint16');
    header.(names{144}) = fread(ifs,1,'uint16');
    header.(names{145}) = fread(ifs,1,'uint16');
    header.(names{146}) = fread(ifs,1,'uint16');
    header.(names{147}) = fread(ifs,1,'uint16');
    header.(names{148}) = fread(ifs,1,'uint16');
    header.(names{149}) = fread(ifs,1,'uint16');
    header.(names{150}) = fread(ifs,1,'uint16');
    header.(names{151}) = fread(ifs,1,'uint16');
    header.(names{152}) = fread(ifs,1,'uint16');
    header.(names{153}) = fread(ifs,1,'uint16');
    header.(names{154}) = fread(ifs,[1 2000],'*char');
    header.(names{155}) = fread(ifs,[1 200],'*char');
    fclose(ifs);
else
    disp('File type unsupported.');
end